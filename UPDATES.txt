- Every Instruction is 2 words (i.e. 32 bit).
- Interrupt module deals with the FETCH_STAGE by getting the PC from it and push it to the stack itself,
    then it raises INT signal in FETCH_STAGE. PC in FETCH_STAGE wil be loaded with {M[2],M[3]}.
- FETCH_STAGE have inputs "NEW_PC" and "CHANGE_PC" signal, to change PC with a specific value so the value of the PC should be chosen
    out of the FETCH_STAGE and just send it the update of the PC.


- While INT=0 & RST=0 (i.e. normal fetching), Invert of "STALL" Signal of the FETCH_STAGE works as IF/ID Registers Enable
    IF (STALL=0) => Write Values in IF/ID Registers

- IF/ID Registers works with "CLK rising_edge"

- While Changing PC, "CHANGE_PC" should be high for two cycles.
- Reset is Done in "14" cycles.
- MEMORY Read Done is high for 2 cycles
- Decode Works at falling edge of FD_ENABLE


# Data & Control Hzards in changing PC value between MEMORY_STAGE & DECODE_STAGE 
    - Example:  RTI
                JMP 1

# Flush FETCH_Registers for branch
# Flush FETCH & DECODE & EXECUTE Registers for return

------------------------------------------------------------------- Phase 2
# FORWADING-UNIT WORKS WITH EX AND MEM ONLY.
# BRANCH-PREDICTION UNIT USES FORWADING-UNIT OUTPUT IN ADDITION TO THE REGISTER FILE TO BRANCH

# Load-use case appears in: LDD, POP
    and can appear in: RET, RTI

# Handling Load-use case of RET, RTI must be handled by arrangment between: HAZARD_DETECTION_UNIT & BRANCH_PREDECTION_UNIT
